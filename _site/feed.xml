<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Leeyee&#39;s Blog - Articles</title>
        <description>我的技术类博客</description>
        <link>http://iyiguo.net</link>
         
        <item>
            <title>Stripes框架如何做系列-向导表单</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/11/06/stripes-how-to-wizard_forms/">《Stripes框架如何做系列-向导表单》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/11/06/stripes-how-to-wizard_forms/">http://iyiguo.net/blog/2016/11/06/stripes-how-to-wizard_forms/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Wizard+Forms&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Wizard+Forms&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;向导表单（跨越多个页面的逻辑表单）经常会出现问题。基于无状态的web处理跨多个页面的交互可能是相当棘手的。一个标准的示例是新用户的注册流程。因为用户需要通过被拆分成的多个页面一部分一部的输入信息。同时输入的信息在每一个页面都应被校验，并始终保留在同一个流中，并在结束的时候在一个原子事物中被提交。&lt;/p&gt;

&lt;h2 id=&quot;stripes&quot;&gt;Stripes向导&lt;/h2&gt;

  &lt;/p&gt;在Stripes中创建一个向导流实际上是非常简单的。简单来说，它涉及编写一个单独的ActionBean去管理页面之间的流，并且通过使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@Wizard&lt;/code&gt;注解来标记它。除此之外，还取决于你是否想用单独的事件／方法去处理导航，或者每个事件一个方法。每个页面用不同的事件（方法）会使流的管理变得容易。下面是一个来自Bugzooky的简短示例:&lt;/p&gt;

&lt;blockquote&gt;
   
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/11/06/stripes-how-to-wizard_forms/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 06 Nov 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/11/06/stripes-how-to-wizard_forms/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/11/06/stripes-how-to-wizard_forms/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-更多使用默认配置</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/09/15/stripes-how-to-use_defaults_more/">《Stripes框架如何做系列-更多使用默认配置》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/09/15/stripes-how-to-use_defaults_more/">http://iyiguo.net/blog/2016/09/15/stripes-how-to-use_defaults_more/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Use+Defaults+More&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Use+Defaults+More&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;这篇文章介绍Stripes中用来减少那些需要在每一个ActionBeans上配置（通常是注解形式）数量的技术。&lt;/p&gt;

&lt;h2 id=&quot;url&quot;&gt;URL绑定和事件名&lt;/h2&gt;

  &lt;/p&gt;从Stripes 1.2开始，Stripes附带了一个名叫&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/net/sourceforge/stripes/controller/NameBasedActionResolver.html&quot;&gt;NameBasedActionResolver&lt;/a&gt;的类，这个类继承子类&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/net/sourceforge/stripes/controller/AnnotatedClassActionResolver.html&quot;&gt;AnnotatedClassActionResolver&lt;/a&gt;. 当URL注解不存在时，&lt;code class=&quot;highlighter-rouge&quot;&gt;NameBasedActionResolver&lt;/code&gt;将自动创建默认的URL绑定和事件名。当注解存在时优先使用注解。&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/09/15/stripes-how-to-use_defaults_more/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 15 Sep 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/09/15/stripes-how-to-use_defaults_more/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/09/15/stripes-how-to-use_defaults_more/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-单元测试</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/09/10/stripes-how-to-unit_testing/">《Stripes框架如何做系列-单元测试》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/09/10/stripes-how-to-unit_testing/">http://iyiguo.net/blog/2016/09/10/stripes-how-to-unit_testing/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Unit+Testing&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Unit+Testing&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;这篇文档介绍两种主要的方式用来测试ActionBeans和与之关联的外部容器类，比如Tomcat，Resin或者Jetty。要决定哪种方式适合你，应该大概去了解下两者。这不是用一个方案就可以解决所有问题的，你可能需要在你的项目中同时使用这两种技术。&lt;/p&gt;

  &lt;/p&gt;但是首先，让我们先说明一些事情……&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;自动化测试是一件好事情。自动化测试可以让你方便的对代码进行重构，直到写出更高质量的代码。&lt;/li&gt;
  &lt;li&gt;我不想通过哲学层面去说明单元测试的好与不好；但良好的可自动运行的测试是值得提倡的，这不关乎他们是否是技术性的单元测试。&lt;/li&gt;
  &lt;li&gt;有工具可以让你测试整个包含在常规servelt容器内渲染的JSP的周期；我发现这有一点像是努力工作并当可能的时候去测试我的外部容器&lt;sup id=&quot;fnref:commnet1&quot;&gt;&lt;a href=&quot;#fn:commnet1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
  &lt;li&gt;对每个Stripes用户，我个人比较推荐使用&lt;a href=&quot;http://www.testng.org/&quot;&gt;TestNG&lt;/a&gt;。它要比JUnit先进，如果你有做过任何的单元测试，那么&lt;a href=&quot;http://www.testng.org/&quot;&gt;TestNG&lt;/a&gt;的上手时间也就大概15分钟。&lt;/li&gt;
&lt;/ol&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/09/10/stripes-how-to-unit_testing/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sat, 10 Sep 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/09/10/stripes-how-to-unit_testing/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/09/10/stripes-how-to-unit_testing/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-状态管理</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/08/25/stripes-how-to-state_management/">《Stripes框架如何做系列-状态管理》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/08/25/stripes-how-to-state_management/">http://iyiguo.net/blog/2016/08/25/stripes-how-to-state_management/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/State+Management&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/State+Management&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;这篇文档有两个主要部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionBeanContext&lt;/code&gt;进行状态管理&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;FlashScope&lt;/code&gt;进行POST请求后重定向&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section&quot;&gt;状态管理&lt;/h2&gt;

  &lt;/p&gt;这一节我们将介绍如何在保证类型安全和ActionBean类可测试的情况下，去访问&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpSession&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Cookies&lt;/code&gt;和其他&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServletRequest/Response&lt;/code&gt;行为。关键点就在于提供一个自己&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionBeanContext&lt;/code&gt;子类。&lt;/p&gt;

&lt;h3 id=&quot;actionbeancontext&quot;&gt;ActionBeanContext子类&lt;/h3&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/08/25/stripes-how-to-state_management/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 25 Aug 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/08/25/stripes-how-to-state_management/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/08/25/stripes-how-to-state_management/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-本地化</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/08/21/stripes-how-to-localization/">《Stripes框架如何做系列-本地化》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/08/21/stripes-how-to-localization/">http://iyiguo.net/blog/2016/08/21/stripes-how-to-localization/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Localization&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Localization&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;本地化是越来越多的网站必须处理的事情。本地化从来都不是不容易的，但是Stripes尽量让其做起来简单。这篇文档我们将覆盖以下内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;选择使用的语言环境&lt;/li&gt;
  &lt;li&gt;选择使用的字符编码&lt;/li&gt;
  &lt;li&gt;寻找本地化资源&lt;/li&gt;
  &lt;li&gt;本地化验证&lt;/li&gt;
  &lt;li&gt;本地化错误信息
    &lt;ul&gt;
      &lt;li&gt;在自定义代码中使用本地化错误信息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;本地化按钮和标签&lt;/li&gt;
  &lt;li&gt;传递本地化变量到布局&lt;/li&gt;
  &lt;li&gt;本地化的其他事情&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;选择使用的语言环境&lt;/h2&gt;

  &lt;/p&gt;构建一个本地化应用可能面临的第一个挑战是针对指定的请求使用哪一个本地化设置。因为有可能你支持的语言和区域不止一个。当用户提交请求，该请求可以包含用户首选语言环境的有序列表。因此你不得不基于支持的语言环境，以及用户首选的语言环境去选择为用户服务的语言环境。&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/08/21/stripes-how-to-localization/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 21 Aug 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/08/21/stripes-how-to-localization/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/08/21/stripes-how-to-localization/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-Spring和Stripes</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/08/03/stripes-how-to-spring-with-stripes/">《Stripes框架如何做系列-Spring和Stripes》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/08/03/stripes-how-to-spring-with-stripes/">http://iyiguo.net/blog/2016/08/03/stripes-how-to-spring-with-stripes/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Spring+with+Stripes&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Spring+with+Stripes&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;Stripes是一个web应用框架，它被设计成易于使用并能提升开发人员的开发效率。Spring是一个主要的轻量级组件容器（当然现如今它也包含了其它的一些功能），同样，它也被设计成易于使用并且也能提升开发效率。那么很自然的，你可能想将两者结合起来使用。&lt;/p&gt;

  &lt;/p&gt;集成了Spring的Stripes使得你的ActionBean类可以访问被配置成Spring bean形式的Spring资源。要这么做，只需要将Spring bean注入到ActionBean中即可。为此，你需要完成一些配置，一旦配置完成，就可以在Stripes web应用中使用Spring bean而无需任何其他XML配置。&lt;/p&gt;

&lt;h2 id=&quot;spring&quot;&gt;安装配置Spring&lt;/h2&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/08/03/stripes-how-to-spring-with-stripes/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Wed, 03 Aug 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/08/03/stripes-how-to-spring-with-stripes/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/08/03/stripes-how-to-spring-with-stripes/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-索引属性</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/22/stripes-how-to-indexed-properties/">《Stripes框架如何做系列-索引属性》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/22/stripes-how-to-indexed-properties/">http://iyiguo.net/blog/2016/07/22/stripes-how-to-indexed-properties/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Indexed+Properties&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Indexed+Properties&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;这篇如何做将涉及如何使用数字索引和字符索引映射属性。定义数字索引是有点困难的，但可以用示例很容易展示出来。试想下，如果想要在页面上编辑一些关于bug的信息，那么可以通过一个包含像 “bug.name”, “bug.description”, “bug.priority”等信息域的表单来完成该操作。现在，如果需要在一个页面一次编辑多个bug，那么可以写许多包含类似”bug1.name”, “bug2.name”的域属性在一个表单中（同样ActionBean中一样）。但是这样做太费事了。此时可以考虑使用Stripes定义的符号（和其他工具类似）并用类似 bug[0].name和 bug[1].name的方式来替换表单域。&lt;/p&gt;

  &lt;/p&gt;为完成上述功能还有两个方面需要考虑：如何在表单内生成域字段名和如何在ActionBean中去接收他们。其实，这两者都是很简单的。&lt;/p&gt;

&lt;h2 id=&quot;jsp&quot;&gt;JSP中的数字索引属性&lt;/h2&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/22/stripes-how-to-indexed-properties/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Fri, 22 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/22/stripes-how-to-indexed-properties/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/22/stripes-how-to-indexed-properties/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-布局复用</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/17/stripes-how-to-layout-reuse/">《Stripes框架如何做系列-布局复用》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/17/stripes-how-to-layout-reuse/">http://iyiguo.net/blog/2016/07/17/stripes-how-to-layout-reuse/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Layout+Reuse&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Layout+Reuse&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;几乎所有的web应用程序都不止一个页面。但大多数情况所有的页面（或者针对每个页面子集使用不同的布局）都有基本相同的主题或者布局。因此常规的通用处理方式是编写如下的JSP页面：&lt;/p&gt;

&lt;blockquote&gt;
    &lt;/p&gt;使用include标签进行简单的布局复用&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;jsp:include page=&quot;/nav/header.jsp&quot;/&amp;gt;
...
&amp;lt;jsp:include page=&quot;/nav/context.jsp&quot;/&amp;gt;
My page content here
&amp;lt;jsp:include page=&quot;/nav/footer.jsp&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/17/stripes-how-to-layout-reuse/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 17 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/17/stripes-how-to-layout-reuse/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/17/stripes-how-to-layout-reuse/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-拦截器</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/16/stripes-how-to-intercept-execution/">《Stripes框架如何做系列-拦截器》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/16/stripes-how-to-intercept-execution/">http://iyiguo.net/blog/2016/07/16/stripes-how-to-intercept-execution/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Intercept+Execution&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Intercept+Execution&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;Stripes设计了拦截器系统，这样可以很容易的为其添加功能。对于交叉性的请求行为，编写拦截器比起扩展Stripes已有组件功能要简单的多。&lt;/p&gt;

  &lt;/p&gt;下面是Stripes生命周期和其拦截系统的核心类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/index.html?net/sourceforge/stripes/controller/LifecycleStage.html&quot;&gt;LifecycleStage&lt;/a&gt;是一个枚举类，用来描述一个请求处理的不同阶段。更多的关于生命周期详细细节可&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/pages/viewpage.action?pageId=492132&quot;&gt;参看这里&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/index.html?net/sourceforge/stripes/controller/Interceptor.html&quot;&gt;Interceptor&lt;/a&gt;是一个接口类，其定义了拦截器的接口方法&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/index.html?net/sourceforge/stripes/controller/Intercepts.html&quot;&gt;Intercepts&lt;/a&gt;是一个注解，用来注解拦截器在那个阶段被拦截&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/index.html?net/sourceforge/stripes/controller/ExecutionContext.html&quot;&gt;ExecutionContext&lt;/a&gt;包装了所有和ActionBean调用有关的上下文内容，并将其提供给拦截器&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;拦截器示例&lt;/h2&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/16/stripes-how-to-intercept-execution/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sat, 16 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/16/stripes-how-to-intercept-execution/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/16/stripes-how-to-intercept-execution/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-文件上传</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/13/stripes-how-to-file-uploads/">《Stripes框架如何做系列-文件上传》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/13/stripes-how-to-file-uploads/">http://iyiguo.net/blog/2016/07/13/stripes-how-to-file-uploads/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/File+Uploads&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/File+Uploads&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;表单中使用文件上传标签&lt;/h2&gt;

  &lt;/p&gt;使用Stripes是很容易实现文件上传的。最简单的方式就是Stripes的表单域中添加一个文件域，然后在ActionBean中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;FileBean&lt;/code&gt;对象去表示该文件属性即可。比如：&lt;/p&gt;

&lt;blockquote&gt;
    &lt;/p&gt;在JSP页面中使用文件域&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;stripes:form&amp;gt;
    ...
    &amp;lt;stripes:file name=&quot;newAttachment&quot;/&amp;gt;
    ...
&amp;lt;/stripes:form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
   
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/13/stripes-how-to-file-uploads/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Wed, 13 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/13/stripes-how-to-file-uploads/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/13/stripes-how-to-file-uploads/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-集成FreeMarker</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/12/stripes-how-to-freeMarker-with-stripes/">《Stripes框架如何做系列-集成FreeMarker》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/12/stripes-how-to-freeMarker-with-stripes/">http://iyiguo.net/blog/2016/07/12/stripes-how-to-freeMarker-with-stripes/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/FreeMarker+with+Stripes&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/FreeMarker+with+Stripes&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;这份文档主要提供对那些已经熟悉&lt;a href=&quot;http://www.freemarker.org/&quot;&gt;FreeMarker&lt;/a&gt;框架并想将其与Stripes集成的帮助。因此这里不打算去介绍&lt;a href=&quot;http://www.freemarker.org/&quot;&gt;FreeMarker&lt;/a&gt;本身，因为&lt;a href=&quot;http://www.freemarker.org/&quot;&gt;FreeMarker&lt;/a&gt;自身已有了优秀的&lt;a href=&quot;http://www.freemarker.org/docs/index.html&quot;&gt;说明文档&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;freemarker&quot;&gt;FreeMarker配置&lt;/h2&gt;

  &lt;/p&gt;首先第一步是去&lt;a href=&quot;http://sourceforge.net/project/showfiles.php?group_id=794&quot;&gt;下载FreeMarker&lt;/a&gt;。强烈建议使用&lt;a href=&quot;http://www.freemarker.org/&quot;&gt;FreeMarker&lt;/a&gt;2.3.8及其以上版本。从2.3.8开始，&lt;a href=&quot;http://www.freemarker.org/&quot;&gt;FreeMarker&lt;/a&gt;新增了一些对未支持JSP标签的支持以便实现完全支持JSP 2.0标签库。由于Stripes的一些标签依赖JSP 2.0 API，因此如果使用低版本的&lt;a href=&quot;http://www.freemarker.org/&quot;&gt;FreeMarker&lt;/a&gt;会导致其无法正常工作。&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/12/stripes-how-to-freeMarker-with-stripes/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Tue, 12 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/12/stripes-how-to-freeMarker-with-stripes/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/12/stripes-how-to-freeMarker-with-stripes/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-扩展</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/10/stripes-how-to-extensions/">《Stripes框架如何做系列-扩展》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/10/stripes-how-to-extensions/">http://iyiguo.net/blog/2016/07/10/stripes-how-to-extensions/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Extensions&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Extensions&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;stripes&quot;&gt;扩展－如何扩展和定制Stripes&lt;/h2&gt;

  &lt;/p&gt;从Stripes1.5开始，在web.xml中可以配置一个或多个包，Stripes将会自动加载所有扩展。这些扩展包含：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有实现了&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/index.html?net/sourceforge/stripes/config/ConfigurableComponent.html&quot;&gt;ConfigurableComponent&lt;/a&gt;接口的类&lt;/li&gt;
  &lt;li&gt;自定义&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/index.html?net/sourceforge/stripes/validation/TypeConverter.html&quot;&gt;类型转换器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;自定义&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/index.html?net/sourceforge/stripes/format/Formatter.html&quot;&gt;格式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/javadoc/index.html?net/sourceforge/stripes/controller/Interceptor.html&quot;&gt;拦截器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/p&gt;在web.xml中添加一个叫做&lt;em&gt;Extension.Packages&lt;/em&gt;的初始化参数变量到StripesFilter中。你指定的包自动包含其所有的子包，因此不需要通过*号去做通配。具体示例如下：&lt;/p&gt;

&lt;blockquote&gt;
   
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/10/stripes-how-to-extensions/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 10 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/10/stripes-how-to-extensions/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/10/stripes-how-to-extensions/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-异常处理</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/10/stripes-how-to-exception_handling/">《Stripes框架如何做系列-异常处理》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/10/stripes-how-to-exception_handling/">http://iyiguo.net/blog/2016/07/10/stripes-how-to-exception_handling/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Exception+Handling&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Exception+Handling&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;异常处理简介&lt;/h2&gt;

  &lt;/p&gt;Servlet规范的内建异常处理机制是有限的，对于处理Web应用产生的异常。具体来说，当异常发生时，它只能将请求转向到一个JSP或者一个文件，而不能指向一个servlet或者一个没有可执行代码的JSP。而这些就是Stripes的异常处理机制要去解决的。&lt;/p&gt;

  &lt;/p&gt;Stripes大多数主要的接口都允许开发者抛出任何不想处理的异常。比如处理方法、验证方法等。调用所有抛出的异常，取决于你定义的异常处理策略：Stripes是不会强加给你的。也就说，Stripes的作者建议应该传递不能处理的异常，让Stripes框架帮你处理，而不是捕获、包装或者抛出异常。&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/10/stripes-how-to-exception_handling/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 10 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/10/stripes-how-to-exception_handling/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/10/stripes-how-to-exception_handling/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-展示错误</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/09/stripes-how-to-display-errors/">《Stripes框架如何做系列-展示错误》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/09/stripes-how-to-display-errors/">http://iyiguo.net/blog/2016/07/09/stripes-how-to-display-errors/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文链接：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/Display+Errors&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/Display+Errors&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;web应用几乎没有例外的会在某些点上生成一些验证错误信息，提示用户做错了什么，应该怎么样正确的去做。这些提示应该与你的应用UI策略一致，能明确的告诉用户如何去处理。下面介绍如何利用Stripes进行错误信息展示。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;输出错误&lt;/h2&gt;

  &lt;/p&gt;Stripes提供若干输出验证错误信息的标签，这些标签是值得花时间通过阅读文档去了解的。主要的标签是&lt;a href=&quot;http://stripes.sourceforge.net/docs/current/taglib/stripes/errors.html&quot;&gt;stripes:erros&lt;/a&gt;。这个标签可以针对一个表单输出所有的验证错误信息或者仅仅输出一个表单指定域的错误信息。&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/09/stripes-how-to-display-errors/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sat, 09 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/09/stripes-how-to-display-errors/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/09/stripes-how-to-display-errors/</guid>
        </item>    
        <item>
            <title>Stripes框架如何做系列-Ajax</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/07/08/stripes-how-to-ajax/">《Stripes框架如何做系列-Ajax》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/07/08/stripes-how-to-ajax/">http://iyiguo.net/blog/2016/07/08/stripes-how-to-ajax/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文链接：&lt;a href=&quot;https://stripesframework.atlassian.net/wiki/display/STRIPES/AJAX&quot;&gt;https://stripesframework.atlassian.net/wiki/display/STRIPES/AJAX&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;如果你没有听说过&lt;a href=&quot;http://en.wikipedia.org/wiki/AJAX&quot; title=&quot;wiki&quot;&gt;Ajax&lt;/a&gt;那么你有可能还生活在穴居时代，因此这里我们不会去讲&lt;a href=&quot;http://en.wikipedia.org/wiki/AJAX&quot; title=&quot;wiki&quot;&gt;Ajax&lt;/a&gt;是什么。如果你真的需要了解，那么建议你点击&lt;a href=&quot;http://en.wikipedia.org/wiki/AJAX&quot; title=&quot;wiki&quot;&gt;这里&lt;/a&gt;。因为&lt;a href=&quot;http://en.wikipedia.org/wiki/AJAX&quot; title=&quot;wiki&quot;&gt;Ajax&lt;/a&gt;作为客户端技术，Stripes作为服务器端框架，所以这篇文档主要关注如何使用&lt;a href=&quot;http://en.wikipedia.org/wiki/AJAX&quot; title=&quot;wiki&quot;&gt;Ajax&lt;/a&gt;技术与Stripes进行交互。如果你关注的是客户端视觉效果和一些&lt;a href=&quot;http://en.wikipedia.org/wiki/AJAX&quot; title=&quot;wiki&quot;&gt;Ajax&lt;/a&gt;技巧，那么通过谷歌搜索你能得到比本文更好的说明。&lt;/p&gt;

  &lt;/p&gt;有许多不同的方式可用来编写&lt;a href=&quot;http://en.wikipedia.org/wiki/AJAX&quot; title=&quot;wiki&quot;&gt;Ajax&lt;/a&gt;应用程序。基本上最容易想到的就是调用一些服务器端（或者只是获取静态内容）逻辑完成与屏幕上可见内容的交互而不用去刷新浏览器页面。更复杂（功能也更强大）的方法包括通过调用服务端返回如XML或者&lt;a href=&quot;http://www.json.org/&quot;&gt;JSON&lt;/a&gt;结构化数据，然后客户端通过JavaScript进行一些复杂的操作。&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/07/08/stripes-how-to-ajax/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Fri, 08 Jul 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/07/08/stripes-how-to-ajax/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/07/08/stripes-how-to-ajax/</guid>
        </item>    
        <item>
            <title>Linux下的Jekyll开发环境配置</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/04/11/linux-jekyll-env-config/">《Linux下的Jekyll开发环境配置》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/04/11/linux-jekyll-env-config/">http://iyiguo.net/blog/2016/04/11/linux-jekyll-env-config/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;博客文章一直是托管在github上的，对于站点的开发也是基于jekyll进行的，不过之前是通过在Window系统上安装Ruby进行的。最近将操作系统切换到了linux，因此需要在linux下配置jekyll环境。说实在的真没有在Windows上点击exe程序进行安装那么舒服，安装过程中遇到了不少问题。不过还好，最后都一一解决了。&lt;/p&gt;

&lt;h2 id=&quot;ruby-ruby&quot;&gt;Ruby安装 &lt;sup id=&quot;fnref:ruby&quot;&gt;&lt;a href=&quot;#fn:ruby&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;

  &lt;/p&gt;Jekyll是基于&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/&quot; title=&quot;ruby&quot;&gt;Ruby&lt;/a&gt;的，因此在安装前需要先安装Ruby。然后通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem&lt;/code&gt; 进行jekyll安装。&lt;/p&gt;

  &lt;/p&gt;可以通过软件管理中心或者&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;命令直接安装&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/&quot; title=&quot;ruby&quot;&gt;Ruby&lt;/a&gt;，不过就算安装成功也无法使用最新的jekyll3，因为最新的jekyll3要求&lt;a href=&quot;https://www.ruby-lang.org/zh_cn/&quot; title=&quot;ruby&quot;&gt;Ruby&lt;/a&gt;的版本必须在2.0以上。通过&lt;/p&gt;

&lt;blockquote&gt;
   
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/04/11/linux-jekyll-env-config/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Mon, 11 Apr 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/04/11/linux-jekyll-env-config/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/04/11/linux-jekyll-env-config/</guid>
        </item>    
        <item>
            <title>Linux Shell Crontab 的坑</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/03/31/linux-crontab-pit/">《Linux Shell Crontab 的坑》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/03/31/linux-crontab-pit/">http://iyiguo.net/blog/2016/03/31/linux-crontab-pit/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;写了个简单的日志统计并发送邮件的脚本，使用到了&lt;code class=&quot;highlighter-rouge&quot;&gt;atnodes&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;mail&lt;/code&gt; 命令。同时托管给 &lt;em&gt;crontab&lt;/em&gt; 定时调用执行。手动测试的时候运行的很是完美，只可惜，自动化后就各种坑：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
      &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atnodes&lt;/code&gt; 无法使用！脚本抛出：&lt;em&gt;Permission denied, please try again&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
      &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mail&lt;/code&gt; 中文乱码！&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/03/31/linux-crontab-pit/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 31 Mar 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/03/31/linux-crontab-pit/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/03/31/linux-crontab-pit/</guid>
        </item>    
        <item>
            <title>Ubuntu14下配置Intellj IDEA快捷方式</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/02/21/linux-intellj-idea-desktop/">《Ubuntu14下配置Intellj IDEA快捷方式》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/02/21/linux-intellj-idea-desktop/">http://iyiguo.net/blog/2016/02/21/linux-intellj-idea-desktop/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;下面是一些在Ubuntu14下安装Intellj IDEA后配置桌面快捷方式时一些坑，记录下。&lt;/p&gt;

&lt;h2 id=&quot;jdk&quot;&gt;JDK环境变量的问题&lt;/h2&gt;

  &lt;/p&gt;ubuntu中，我们将环境变量配置在etc/profile 或者当前登陆用户的.bashrc/.bash_profile文件中。因此其对应的使用范围也是不同的。&lt;/p&gt;

  &lt;/p&gt;etc/profile 针对所有登录用户，因此为省事期间，可以将JDK配置在这里，一劳永逸，也就不会出现后续问题。&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/02/21/linux-intellj-idea-desktop/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 21 Feb 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/02/21/linux-intellj-idea-desktop/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/02/21/linux-intellj-idea-desktop/</guid>
        </item>    
        <item>
            <title>Spring Retry 常用示例</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/01/19/spring-retry-common-case/">《Spring Retry 常用示例》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/01/19/spring-retry-common-case/">http://iyiguo.net/blog/2016/01/19/spring-retry-common-case/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleRetryPolicy&lt;/code&gt;可以实现指定次数的重试。只需要设置 &lt;em&gt;maxAttempts&lt;/em&gt; 参数即可。其默认重试次数是3次。该策略为创建&lt;code class=&quot;highlighter-rouge&quot;&gt;RetryTemplate&lt;/code&gt;对象时默认的重试策略。具体使用如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SimpleRetryPolicy simpleRetryPolicy = new SimpleRetryPolicy();
simpleRetryPolicy.setMaxAttempts(4);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;规定时间内连续重试&lt;/h3&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TimeoutRetryPolicy&lt;/code&gt;可以实现指定时间内的重试。超时时间通过参数 &lt;em&gt;timeout&lt;/em&gt; 进行设置。默认超时时间1s。使用方式如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// all spend 1s
TimeoutRetryPolicy timeoutRetryPolicy = new TimeoutRetryPolicy(); 
timeoutRetryPolicy.setTimeout(2000L);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;组合重试&lt;/h3&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CompositeRetryPolicy&lt;/code&gt;实现了重试策略的组合。通过其 &lt;em&gt;policies&lt;/em&gt; 字段，可以为其添加多个重试策略。组合策略执行的过程中，所有策略只要有一个达成终止条件，那么该重试结束。我们可以用组合重试策略实现一些相对比较复杂的重试。比如我们要实现在指定时间1s内重试3次，每次重试间隔0.2秒，就可以使用以下方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CompositeRetryPolicy compositeRetryPolicy = new CompositeRetryPolicy();

SimpleRetryPolicy simpleRetryPolicy = new SimpleRetryPolicy();

TimeoutRetryPolicy timeoutRetryPolicy = new TimeoutRetryPolicy();

FixedBackOffPolicy fixedBackOffPolicy = new FixedBackOffPolicy();
fixedBackOffPolicy.setBackOffPeriod(200); // 每次重试间隔200ms

compositeRetryPolicy.setPolicies(new RetryPolicy[]{ 
		simpleRetryPolicy,
		timeoutRetryPolicy,
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/01/19/spring-retry-common-case/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Tue, 19 Jan 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/01/19/spring-retry-common-case/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/01/19/spring-retry-common-case/</guid>
        </item>    
        <item>
            <title>Spring Retry 简介</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2016/01/17/spring-retry-simple-introduce/">《Spring Retry 简介》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2016/01/17/spring-retry-simple-introduce/">http://iyiguo.net/blog/2016/01/17/spring-retry-simple-introduce/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;http://docs.spring.io/spring-batch/reference/html/retry.html&quot;&gt;http://docs.spring.io/spring-batch/reference/html/retry.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;retrytemplate-&quot;&gt;9.1  RetryTemplate 重试模板方法&lt;/h2&gt;

  &lt;/p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

  &lt;/p&gt;The retry functionality was pulled out of Spring Batch as of 2.2.0. It is now part of a new library, Spring Retry.&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2016/01/17/spring-retry-simple-introduce/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 17 Jan 2016 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2016/01/17/spring-retry-simple-introduce/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2016/01/17/spring-retry-simple-introduce/</guid>
        </item>    
        <item>
            <title>PL/SQL块中使用SQL</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2015/08/30/plsql-sql-use-sql-in-block/">《PL/SQL块中使用SQL》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2015/08/30/plsql-sql-use-sql-in-block/">http://iyiguo.net/blog/2015/08/30/plsql-sql-use-sql-in-block/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;在PL/SQL块中使用select语句，可以将数据库数据检索到变量中。&lt;/p&gt;

  &lt;/p&gt;当在PL/SQL块中使用select语句时，必须要带有&lt;strong&gt;into&lt;/strong&gt;子句。语法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT select_list
	INTO {variable_name[,variable_name]... | record_name}
FROM table_name
WHERE condition;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;其中，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;select_list为指定查询列；&lt;/li&gt;
  &lt;li&gt;variable_name为接收指定查询列的标量变量名；&lt;/li&gt;
  &lt;li&gt;record_name为接收指定查询列的记录变量名；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1、使用标量变量接收数据&lt;/h3&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2015/08/30/plsql-sql-use-sql-in-block/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 30 Aug 2015 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2015/08/30/plsql-sql-use-sql-in-block/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2015/08/30/plsql-sql-use-sql-in-block/</guid>
        </item>    
        <item>
            <title>PL/SQL流程控制语言</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2015/08/30/plsql-control-statement/">《PL/SQL流程控制语言》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2015/08/30/plsql-control-statement/">http://iyiguo.net/blog/2015/08/30/plsql-control-statement/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;语法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IF condition THEN
	statements;
[ELSIF condition THEN
	statements;]
[ELSE
	statements;]
END IF;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DECLARE
	v_age NUMBER(3);
BEGIN
	SELECT age INTO v_age FROM user
	WHERE lower(name) = lower(&#39;&amp;amp;&amp;amp;name&#39;);
	IF v_age &amp;lt; 20 THEN
		UPDATE user SET age = v_age*2 WHERE lower(name) = lower(&#39;&amp;amp;&amp;amp;name&#39;);
	ELSEIF v_age &amp;lt; 40 THEN
	  UPDATE user SET age = v_age*3 WHERE lower(name) = lower(&#39;&amp;amp;&amp;amp;name&#39;);
	ELSE
		UPDATE user SET age = v_age/2 WHERE lower(name) = lower(&#39;&amp;amp;&amp;amp;name&#39;);
	END IF;
END;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;case&quot;&gt;CASE语句&lt;/h3&gt;

  &lt;/p&gt;语法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2015/08/30/plsql-control-statement/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 30 Aug 2015 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2015/08/30/plsql-control-statement/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2015/08/30/plsql-control-statement/</guid>
        </item>    
        <item>
            <title>PL/SQL复合数据类型</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2015/08/30/plsql-complex-data-type/">《PL/SQL复合数据类型》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2015/08/30/plsql-complex-data-type/">http://iyiguo.net/blog/2015/08/30/plsql-complex-data-type/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;PL/SQL记录类似高级语句中的结构，用于处理&lt;strong&gt;单行多列&lt;/strong&gt;数据。&lt;/p&gt;

&lt;h3 id=&quot;plsql-1&quot;&gt;自定义PL/SQL记录&lt;/h3&gt;

  &lt;/p&gt;语法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TYPE type_name IS RECORD(
	filed_declaration[,filed_declaration]...
);

indetifier type_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;示例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DECALRE
	TYPE user_record_type IS RECORD(
		name user.name%TYPE,
		age user.age%TYPE
	);
	
	user_record user_type;
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rowtype&quot;&gt;使用%ROWTYPE属性定义记录变量&lt;/h3&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2015/08/30/plsql-complex-data-type/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 30 Aug 2015 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2015/08/30/plsql-complex-data-type/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2015/08/30/plsql-complex-data-type/</guid>
        </item>    
        <item>
            <title>windows下Git命令组的实现</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2015/08/11/git-cmdgroup/">《windows下Git命令组的实现》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2015/08/11/git-cmdgroup/">http://iyiguo.net/blog/2015/08/11/git-cmdgroup/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;使用git进行项目版本管理时，在实际的操作中经常会有使用多个命令完成一个操作的情况出现，比如常见的代码远程更新操作可能就包含以下几个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;保存当前工作区。&lt;a href=&quot;http://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;拉取远程分支代码到本地。&lt;a href=&quot;http://git-scm.com/docs/git-pull&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull --rebase&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;恢复当前工作区。&lt;code class=&quot;highlighter-rouge&quot;&gt;git stash pop&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

  &lt;/p&gt;那么有没有办法可以使用一个自定义命令一次完成上述三个命令的执行？&lt;/p&gt;

  &lt;/p&gt;其实要完成上述命令组很简单，我们只要完成一个包含这几条命令的脚本文件即可。linux环境下我们可以直接自定一个shell脚本，比如下面的形式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

git stash
git pull --rebase
git stash pop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2015/08/11/git-cmdgroup/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Tue, 11 Aug 2015 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2015/08/11/git-cmdgroup/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2015/08/11/git-cmdgroup/</guid>
        </item>    
        <item>
            <title>awk多文件处理</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2015/08/02/awk-muli-file/">《awk多文件处理》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2015/08/02/awk-muli-file/">http://iyiguo.net/blog/2015/08/02/awk-muli-file/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;日常的开发中，经常会针对不同的需要将程序中的日志进行分类存储，但在运维或者异常处理需要查看时，又不得不针对多个日志文件进行联合处理。甚至有些时候需要进行日志关联查询。这种情况下，一般的 &lt;em&gt;linux&lt;/em&gt; 命令，比如 &lt;em&gt;grep&lt;/em&gt; 等就显得功能不够强大了。此时可以考虑使用 &lt;em&gt;awk&lt;/em&gt; 进行多文件处理，借助其语法可以很方便的实现文件内容关联查询，完成类似 &lt;em&gt;sql&lt;/em&gt; 式的&lt;strong&gt;关联查询&lt;/strong&gt;。&lt;/p&gt;

  &lt;/p&gt;首先，定义如下两个文件。一个是学生信息 &lt;em&gt;s.log&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
    &lt;/p&gt;sid tid name age address&lt;br /&gt;
1 1 张三 18 北京朝阳&lt;br /&gt;
2 1 李四 19 北京西城&lt;br /&gt;
3 2 马六 17 北京海淀&lt;br /&gt;
4 2 王五 17 北京昌平&lt;br /&gt;
5 3 唐七 18 北京西城&lt;br /&gt;
6 1 徐六 16 北京朝阳&lt;/p&gt;
&lt;/blockquote&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2015/08/02/awk-muli-file/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 02 Aug 2015 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2015/08/02/awk-muli-file/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2015/08/02/awk-muli-file/</guid>
        </item>    
        <item>
            <title>awk入门</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2015/07/28/awk-base-get-start/">《awk入门》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2015/07/28/awk-base-get-start/">http://iyiguo.net/blog/2015/07/28/awk-base-get-start/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Awk&quot;&gt;awk&lt;/a&gt;是一款强大的文本分析工具。&lt;a href=&quot;https://zh.wikipedia.org/wiki/Awk&quot;&gt;awk&lt;/a&gt; 按行解析数据，并对其进行分割处理。下面是一些&lt;a href=&quot;https://zh.wikipedia.org/wiki/Awk&quot;&gt;awk&lt;/a&gt;的入门语法与示例。&lt;/p&gt;

  &lt;/p&gt;首先我们使用以下的文件片段演示。文件片段&lt;sup id=&quot;fnref:pome&quot;&gt;&lt;a href=&quot;#fn:pome&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;内容如下：&lt;/p&gt;

&lt;blockquote&gt;
    &lt;/p&gt;The Lost Love&lt;br /&gt;
William Wordsworth&lt;br /&gt;
She dwelt among the untrodden ways beside the springs of dove.&lt;br /&gt;
A maid whom there were none to praise, and very few to love.&lt;br /&gt;
A violet by a mossy stone, half hidden from the eye!&lt;br /&gt;
Fair as a star, when only one is shining in the sky.&lt;br /&gt;
She lived unknown, and few could know, when lucy ceased to be.&lt;br /&gt;
But she is in her grave, and oh, the difference to me!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;常用命令&lt;/h2&gt;

&lt;h3 id=&quot;tab&quot;&gt;1. 使用默认分割符（空格或者TAB）分割.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awk &#39;{print NR,$1}&#39; test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2015/07/28/awk-base-get-start/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Tue, 28 Jul 2015 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2015/07/28/awk-base-get-start/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2015/07/28/awk-base-get-start/</guid>
        </item>    
        <item>
            <title>使用DateFormat需设置语言环境</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2014/05/19/java-dateformat-instance/">《使用DateFormat需设置语言环境》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2014/05/19/java-dateformat-instance/">http://iyiguo.net/blog/2014/05/19/java-dateformat-instance/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;先看段代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String sDate = &quot;2014-12-20&quot;;
try {
    DateFormat df = DateFormat.getDateInstance();
    Date date = df.parse(sDate);
} catch (Exception e) {
    e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;这段代码在中文语言环境下是可以测试通过。但在其他语言环境中则会抛出异常。原因是&lt;code class=&quot;highlighter-rouge&quot;&gt;DateFormat.getDateInstance()&lt;/code&gt;初始化时会跟据当前语言环境设置日期格式。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
      &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DateFormat.getDateInstance()&lt;/code&gt; 根据当前语言环境设置日期模式：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; zh_CN : yyyy-MM-dd : 2014-05-19
 en_us : MMM d, yyyy : May 19, 2014
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2014/05/19/java-dateformat-instance/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Mon, 19 May 2014 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2014/05/19/java-dateformat-instance/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2014/05/19/java-dateformat-instance/</guid>
        </item>    
        <item>
            <title>git快速入门</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2013/11/27/git-quick-start/">《git快速入门》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2013/11/27/git-quick-start/">http://iyiguo.net/blog/2013/11/27/git-quick-start/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;我们这里模拟几种场景，以便您快速上手.&lt;/p&gt;

&lt;h3 id=&quot;git&quot;&gt;场景一：【本地建立GIT版本管理并添加文件】&lt;/h3&gt;

&lt;h4 id=&quot;step-1&quot;&gt;step-1、创建项目根目录&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir gitProject
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-2&quot;&gt;step-2、进入目录并初始版本管理&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd gitProject
$ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;后，将在 gitProject目录下生成 .git隐藏文件。可使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -a&lt;/code&gt; 进行查看&lt;/p&gt;

&lt;h4 id=&quot;step-3gitproject&quot;&gt;step-3、添加文件到目录gitProject&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch HelloWorld.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-4&quot;&gt;step-4、查看当前版本仓库状态&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status     # 这里应该会显示HelloWorld.java为untracked files,也就是尚未进行版本管理
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-5helloworldjava&quot;&gt;step-5、将HelloWorld.java添加到版本管理中&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add HelloWorld.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-6&quot;&gt;step-6、再次查看版本仓库状态&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status     # 此时将会显示HelloWorld为一个new file，需要提交到版本库中
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-7helloworldjava&quot;&gt;step-7、提交HelloWorld.java到版本库&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit HelloWorld.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-8helloworldjava&quot;&gt;step-8、为HelloWorld.java添加内容&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi HelloWorld.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-9helloworldjava&quot;&gt;step-9、查看当前HelloWorld.java文件与提交的版本库中的差异&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-10helloworldjava&quot;&gt;step-10、提交修改后的HelloWorld.java到版本库&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -m &#39;init import&#39; HelloWorld.java
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;step-11&quot;&gt;step-11、查看操作日志&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;&lt;em&gt;补充知识&lt;/em&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2013/11/27/git-quick-start/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Wed, 27 Nov 2013 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2013/11/27/git-quick-start/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2013/11/27/git-quick-start/</guid>
        </item>    
        <item>
            <title>mybatis自增主键配置</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2013/08/22/mybatis-auto-increment-primary-key/">《mybatis自增主键配置》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2013/08/22/mybatis-auto-increment-primary-key/">http://iyiguo.net/blog/2013/08/22/mybatis-auto-increment-primary-key/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;mybatis进行插入操作时，如果表的主键是自增的，针对不同的数据库相应的操作也不同。基本上经常会遇到的就是 Oracle Sequece 和  Mysql 自增主键，至于其他的手动生成唯一主键的问题在这里就不讨论了，这里主要说明下在mybatis中对于自增主键的配置。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;不返回自增主键值&lt;/h2&gt;

  &lt;/p&gt;如果考虑到插入数据的主键不作为其他表插入数据的外键使用，那么可以考虑使用这种方式。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
      &lt;/p&gt;Oracle Sequence 配置&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;sql id=&#39;TABLE_NAME&#39;&amp;gt;TEST_USER&amp;lt;/sql&amp;gt;
 &amp;lt;sql id=&#39;TABLE_SEQUENCE&#39;&amp;gt;SEQ_TEST_USER_ID.nextval&amp;lt;/sql&amp;gt;

 &amp;lt;!-- 注意这里直接调用sequence的nextval函数 --&amp;gt;
 &amp;lt;insert id=&quot;insert&quot; parameterType=&quot;User&quot;&amp;gt;
     insert into &amp;lt;include refid=&quot;TABLE_NAME&quot; /&amp;gt; (ID,NAME,AGE)
         values ( &amp;lt;include refid=&quot;TABLE_SEQUENCE&quot; /&amp;gt; ,#{name}, #{age} )
 &amp;lt;/insert&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2013/08/22/mybatis-auto-increment-primary-key/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 22 Aug 2013 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2013/08/22/mybatis-auto-increment-primary-key/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2013/08/22/mybatis-auto-increment-primary-key/</guid>
        </item>    
        <item>
            <title>javascript身份证号码验证</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2013/07/31/javascript-idcard-validate/">《javascript身份证号码验证》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2013/07/31/javascript-idcard-validate/">http://iyiguo.net/blog/2013/07/31/javascript-idcard-validate/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;加权因子&lt;strong&gt;W&lt;sub&gt;i&lt;/sub&gt;&lt;/strong&gt;&lt;/p&gt;

      &lt;/p&gt;从右到左依次定义为：&lt;/p&gt;

    &lt;blockquote&gt;
        &lt;/p&gt;&lt;strong&gt;W&lt;sub&gt;i&lt;/sub&gt; = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1]&lt;/strong&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2013/07/31/javascript-idcard-validate/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Wed, 31 Jul 2013 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2013/07/31/javascript-idcard-validate/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2013/07/31/javascript-idcard-validate/</guid>
        </item>    
        <item>
            <title>Hibernate缓存</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2013/07/07/hibernate-cache/">《Hibernate缓存》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2013/07/07/hibernate-cache/">http://iyiguo.net/blog/2013/07/07/hibernate-cache/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;Hibernate中实现缓存的对象有&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;SessionFactory&lt;/code&gt;。&lt;/p&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;的缓存为内置缓存，不可被卸载，称为Hibernate的一级缓存；&lt;/p&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SessionFactory&lt;/code&gt;有一个内置缓存和一个外置缓存。其中外置缓存可插拔，被称作Hibernate的二级缓存。&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2013/07/07/hibernate-cache/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 07 Jul 2013 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2013/07/07/hibernate-cache/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2013/07/07/hibernate-cache/</guid>
        </item>    
        <item>
            <title>数据库事务与并发</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2013/07/04/database-transaction-concurrency/">《数据库事务与并发》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2013/07/04/database-transaction-concurrency/">http://iyiguo.net/blog/2013/07/04/database-transaction-concurrency/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;用于读数据操作，他是非独占的，允许其他事务同时读取其锁定的资源，但不允许其他事务更新他。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;加锁条件：当一个事务执行&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;语句时。&lt;/li&gt;
  &lt;li&gt;解锁条件：默认情况下，数据读取后，数据库系统立即释放共享锁。&lt;/li&gt;
  &lt;li&gt;兼容性：放置共享锁后还可放置共享锁和更新锁。&lt;/li&gt;
  &lt;li&gt;并发性：具有良好的并发性能。当多个事务读取相同的数据时，每个事务都会获得一把共享锁，因此可以同时读锁定的数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-3&quot;&gt;独占锁&lt;/h3&gt;

  &lt;/p&gt;也叫排他锁，使用与修改数据的场合。他锁定的资源，其他事务不能进行读写。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;加锁条件：当一个事务执行&lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt;时，数据库系统会自动对被操作的数据使用独占锁。如果该数据已有其他锁存在，则不能放置独占锁。&lt;/li&gt;
  &lt;li&gt;解锁条件：事务结束。&lt;/li&gt;
  &lt;li&gt;兼容性：不和其他锁兼容。&lt;/li&gt;
  &lt;li&gt;并发性：并发性差，只允许有一个事务访问锁定数据。其他事务需等待，直到当前事务结束。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-4&quot;&gt;更新锁&lt;/h3&gt;

  &lt;/p&gt;更新操作的初始阶段用来锁定可以能要被修改资源的锁。更新锁可避免使用共享锁造成的死锁现象。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;加锁条件：当执行&lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;时，数据库系统会先为事务分配一个更新锁。&lt;/li&gt;
  &lt;li&gt;解锁条件：当读取数据完毕，执行更新操作时，更新锁升级为独占锁。&lt;/li&gt;
  &lt;li&gt;兼容性：与共享锁兼容。一个资源可同时放置更新锁和共享锁，但只能放置一把更新锁。&lt;/li&gt;
  &lt;li&gt;并发性：允许多个事务同时读锁定的资源，但不允许其他事务修改。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-5&quot;&gt;如何防止死锁&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;合理安排表访问顺序；&lt;/li&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2013/07/04/database-transaction-concurrency/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 04 Jul 2013 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2013/07/04/database-transaction-concurrency/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2013/07/04/database-transaction-concurrency/</guid>
        </item>    
        <item>
            <title>使用autoMapping配置关联关系时应注意的问题</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2013/05/30/mybatis-association-autoMapping/">《使用autoMapping配置关联关系时应注意的问题》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2013/05/30/mybatis-association-autoMapping/">http://iyiguo.net/blog/2013/05/30/mybatis-association-autoMapping/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;利用 &lt;strong&gt;association&lt;/strong&gt; 解决多对一、一对一问题时，在配置 &lt;strong&gt;resultMap&lt;/strong&gt; 时使用 &lt;strong&gt;&lt;em&gt;autoMapping&lt;/em&gt;&lt;/strong&gt; 属性映射表字段时，生成的多端对象数据中是拿不到声明的外键的。&lt;/p&gt;

  &lt;/p&gt;如果业务有需要在多的一端对象中直接获取外键属性，而不是通过对应的一端来获取，那么就需要在使用 &lt;strong&gt;autoMapping&lt;/strong&gt; 时，重新为多端表指明主外键映射关系或者撇弃 &lt;strong&gt;&lt;em&gt;autoMapping&lt;/em&gt;&lt;/strong&gt; 而改用手工声明。&lt;/p&gt;

  &lt;/p&gt;首先做如下定义：&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2013/05/30/mybatis-association-autoMapping/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 30 May 2013 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2013/05/30/mybatis-association-autoMapping/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2013/05/30/mybatis-association-autoMapping/</guid>
        </item>    
        <item>
            <title>mybatis分页的简单实现</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2013/05/26/mybatis-simple-pagination/">《mybatis分页的简单实现》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2013/05/26/mybatis-simple-pagination/">http://iyiguo.net/blog/2013/05/26/mybatis-simple-pagination/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;最近的项目中使用到了&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis&lt;/code&gt;，发现&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis&lt;/code&gt;不支持物理分页，只支持内存分页。因此为了解决这个问题，在网上搜索了一番，不过都比较繁琐。最后使用正则表达过滤查询语句的方式简单解决了该问题.&lt;/p&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis&lt;/code&gt;物理分页的核心是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis&lt;/code&gt;的拦截器 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.apache.ibatis.plugin.Interceptor&lt;/code&gt; ,在&lt;code class=&quot;highlighter-rouge&quot;&gt;mybatis&lt;/code&gt;准备好&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL&lt;/code&gt;的时候，对&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL&lt;/code&gt;字符串进行拦截，生成适合&lt;code class=&quot;highlighter-rouge&quot;&gt;Oracle&lt;/code&gt;数据库的分页语句即可。废话不多讲了，直接上代码.&lt;/p&gt;

&lt;blockquote&gt;
    &lt;/p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 该部分依赖commons-lang3.jar包进行反射写入，也可使用 mybatis 自带的反射类实现这部分功能&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;拦截器代码&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package org.mybatis.test.interceptor;

import java.sql.Connection;
import java.util.*;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.reflect.FieldUtils;
import org.apache.ibatis.executor.statement.StatementHandler;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.plugin.*;
import org.apache.ibatis.session.RowBounds;

@Intercepts(@Signature(type = StatementHandler.class, method = &quot;prepare&quot;, args = { Connection.class }))
public class PaginationInterceptor implements Interceptor {

	private final static String SQL_SELECT_REGEX = &quot;(?is)^\\s*SELECT.*$&quot;;
	private final static String SQL_COUNT_REGEX = &quot;(?is)^\\s*SELECT\\s+COUNT\\s*\\(\\s*(?:\\*|\\w+)\\s*\\).*$&quot;;

	//@Override
	public Object intercept(Invocation inv) throws Throwable {

		StatementHandler target = (StatementHandler) inv.getTarget();

		BoundSql boundSql = target.getBoundSql();

		String sql = boundSql.getSql();

		if (StringUtils.isBlank(sql)) {
			return inv.proceed();
		}
		System.out.println(&quot;origin sql&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&quot; + sql.replaceAll(&quot;\n&quot;, &quot;&quot;));

		// 只有为select查询语句时才进行下一步
		if (sql.matches(SQL_SELECT_REGEX)
				&amp;amp;&amp;amp; !Pattern.matches(SQL_COUNT_REGEX, sql)) {

			Object obj = FieldUtils.readField(target, &quot;delegate&quot;, true);
			// 反射获取 RowBounds 对象。
			RowBounds rowBounds = (RowBounds) FieldUtils.readField(obj,
					&quot;rowBounds&quot;, true);
					
			// 分页参数存在且不为默认值时进行分页SQL构造
			if (rowBounds != null &amp;amp;&amp;amp; rowBounds != RowBounds.DEFAULT) {
				FieldUtils.writeField(boundSql, &quot;sql&quot;, newSql(sql, rowBounds),
						true);
				System.out.println(&quot;new sql&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&quot;
						+ boundSql.getSql().replaceAll(&quot;\n&quot;, &quot;&quot;));

				// 一定要还原否则将无法得到下一组数据(第一次的数据被缓存了)
				FieldUtils.writeField(rowBounds, &quot;offset&quot;,
						RowBounds.NO_ROW_OFFSET, true);
				FieldUtils.writeField(rowBounds, &quot;limit&quot;,
						RowBounds.NO_ROW_LIMIT, true);
			}
		}
		return inv.proceed();
	}

	public String newSql(String oldSql, RowBounds rowBounds) {
		String start = &quot; SELECT * FROM   (SELECT   row_.*, ROWNUM rownum_ FROM ( &quot;;
		String end = &quot; ) row_ WHERE   ROWNUM &amp;lt;= &quot; + rowBounds.getLimit()
				+ &quot;) WHERE   rownum_ &amp;gt; &quot; + rowBounds.getOffset();

		return start + oldSql + end;
	}

	//@Override
	public Object plugin(Object target) {
		return Plugin.wrap(target, this);
	}

	//@Override
	public void setProperties(Properties arg0) {
		System.out.println(arg0);
	}
    
    //测试正则表达式是否能正常工作
	public static void main(String[] args) {
		String SQL_SELECT_REGEX = &quot;^\\s*SELECT.*$&quot;;
		String SQL_COUNT_REGEX = &quot;^\\s*SELECT\\s+COUNT\\s*\\(\\s*(?:\\*|\\w+)\\s*\\).*$&quot;;
		List&amp;lt;String&amp;gt; tests = new ArrayList&amp;lt;String&amp;gt;();
		tests.add(&quot;select count(*) from abc \n\t\t where\n abc&quot;);
		tests.add(&quot;SELECT 	COUNT(*) from abc&quot;);
		tests.add(&quot; select count  (*) from abc&quot;);
		tests.add(&quot;  select count(  *) from abc&quot;);
		tests.add(&quot;select count( *  ),id   from abc&quot;);
		tests.add(&quot;select * from abc&quot;);
		tests.add(&quot;select abc,test,fdas from abc&quot;);
		tests.add(&quot;select count(adb) from abc&quot;);
		tests.add(&quot;select count(0) from abc&quot;);
		tests.add(&quot;select min(count(*)) from abc&quot;);
		tests.add(&quot;update min(count(*)) from abc&quot;);
		tests.add(&quot;delete min(count(*)) from abc&quot;);
		Pattern p1 = Pattern.compile(SQL_SELECT_REGEX, Pattern.DOTALL
				| Pattern.CASE_INSENSITIVE);
		Pattern p2 = Pattern.compile(SQL_COUNT_REGEX, Pattern.DOTALL
				| Pattern.CASE_INSENSITIVE);
		for (String str : tests) {
			Matcher m1 = p1.matcher(str);
			Matcher m2 = p2.matcher(str);
			System.out.println(&quot;匹配字符串: &quot; + str);
			System.out.println(&quot;	是select语句? &quot; + m1.matches());
			System.out.println(&quot;	是count语句? &quot; + m2.matches());
			System.out.println();
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;spring&quot;&gt;在spring中配置拦截器&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;bean name=&quot;paginationInterceptor&quot; class=&quot;org.mybatis.test.interceptor.PaginationInterceptor&quot;&amp;gt;&amp;lt;/bean&amp;gt;

&amp;lt;!-- define the SqlSessionFactory --&amp;gt;
&amp;lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&amp;gt;
	&amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&amp;gt;
	&amp;lt;property name=&quot;typeAliasesPackage&quot; value=&quot;org.mybatis.test.domain&quot; /&amp;gt;
	&amp;lt;property name=&quot;plugins&quot;&amp;gt;
		&amp;lt;list&amp;gt;
			&amp;lt;ref bean=&quot;paginationInterceptor&quot; /&amp;gt;
		&amp;lt;/list&amp;gt;
	&amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;使用&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Test(){
	private String name;
	private int age;
	// set/get省
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2013/05/26/mybatis-simple-pagination/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 26 May 2013 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2013/05/26/mybatis-simple-pagination/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2013/05/26/mybatis-simple-pagination/</guid>
        </item>    
        <item>
            <title>javascript中的null和undefined</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2013/05/07/javascript-null-undefined/">《javascript中的null和undefined》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2013/05/07/javascript-null-undefined/">http://iyiguo.net/blog/2013/05/07/javascript-null-undefined/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;表示无值或不存在的对象；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
      &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;表示一个未声明的变量。声明但没有赋值的变量或者一个并不存在的对象属性;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var param; // 声明但不赋值，其等价于
 var param = undefined;

 var obj = {}; //声明一个对象
 var param1 = obj.param; // 对象不存在的属性
 console.info(param1); // undefined
 console.info(param1 === undefined); // true
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
      &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;不同于&lt;strong&gt;未定义&lt;/strong&gt;，但在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;typeof&lt;/code&gt;方法时，该方法并不区分&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;和&lt;strong&gt;未定义&lt;/strong&gt;，其返回值均为&lt;em&gt;字符串&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var param; 
 console.info(typeof param); // 打印 &quot;undefined&quot;
 console.info(typeof param === &#39;undefined&#39;); // true

 // 注意：param1并未被声明，属于首次使用
 console.info(typeof param1); // 打印 &quot;undefined&quot;
 console.info(typeof param1 === &#39;undefined&#39;); // true
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2013/05/07/javascript-null-undefined/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Tue, 07 May 2013 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2013/05/07/javascript-null-undefined/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2013/05/07/javascript-null-undefined/</guid>
        </item>    
        <item>
            <title>jQuery插件编写</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2012/12/02/jquery-plugins-authoring/">《jQuery插件编写》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2012/12/02/jquery-plugins-authoring/">http://iyiguo.net/blog/2012/12/02/jquery-plugins-authoring/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;http://docs.jquery.com/Plugins/Authoring&quot;&gt;http://docs.jquery.com/Plugins/Authoring&lt;/a&gt;&lt;/p&gt;

  &lt;/p&gt;So you’ve become comfortable with jQuery and would like to learn how to write your own plugins. Great! You’re in the right spot. Extending jQuery with plugins and methods is very powerful and can save you and your peers a lot of development time by abstracting your most clever functions into plugins. This post will outline the basics, best practices, and common pitfalls to watch out for as you begin writing your plugin.&lt;/p&gt;

  &lt;/p&gt;当你已经熟练掌握&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;并且想学习如何编写属于自己的插件程序时，你可以参看这篇文章。使用插件程序和方法扩展&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;是非常强大的。你可以将一些想法抽象为函数并封装到插件中以便为你和你的同事节省许多开发时间。&lt;/p&gt;

&lt;h1 id=&quot;contents&quot;&gt;目录(CONTENTS)&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2012/12/02/jquery-plugins-authoring/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 02 Dec 2012 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2012/12/02/jquery-plugins-authoring/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2012/12/02/jquery-plugins-authoring/</guid>
        </item>    
        <item>
            <title>mybatis参数映射</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2012/09/27/mybatis-param-mapping-rules/">《mybatis参数映射》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2012/09/27/mybatis-param-mapping-rules/">http://iyiguo.net/blog/2012/09/27/mybatis-param-mapping-rules/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;当参数未使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@Param&lt;/code&gt;注解时，可以通过以下方式访问：&lt;/p&gt;

&lt;blockquote&gt;
    &lt;/p&gt;#{参数位置[0..n-1]}&lt;/p&gt;
&lt;/blockquote&gt;

  &lt;/p&gt;或者&lt;/p&gt;

&lt;blockquote&gt;
   
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2012/09/27/mybatis-param-mapping-rules/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 27 Sep 2012 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2012/09/27/mybatis-param-mapping-rules/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2012/09/27/mybatis-param-mapping-rules/</guid>
        </item>    
        <item>
            <title>jQuery eTable Plugin</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2012/05/05/jquery-etable-plugin/">《jQuery eTable Plugin》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2012/05/05/jquery-etable-plugin/">http://iyiguo.net/blog/2012/05/05/jquery-etable-plugin/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;很多时候我们需要对页面上的表格进行添加一行，删除一行这样的基本操作。如果我们使用原生的javascrip来写会很不方便。为了解决这个问题我们封装了一些常规的页面表格处理方式，集成到jQuery中，方面我们后续使用。&lt;/p&gt;

  &lt;/p&gt;如此，jQuery eTable Plugin 便应运而生了。该套函数库提供对表格操作的一些基本方法。其实质是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;$(table).eTable()&lt;/code&gt;获取封装了表格元素的&lt;code class=&quot;highlighter-rouge&quot;&gt;ETable&lt;/code&gt;对象，同时.&lt;code class=&quot;highlighter-rouge&quot;&gt;eTable&lt;/code&gt;对象封装了一些列针对表格行列进行操作的方法。使用这些方法可以对表格进行行列的插入与删除。&lt;/p&gt;

  &lt;/p&gt;可以通过如下方式获取页面表格对象：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var $eTable = $(&quot;#table1&quot;).eTable();
var $eTable = $(document.getElementById(&#39;table1&#39;)).eTable();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2012/05/05/jquery-etable-plugin/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sat, 05 May 2012 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2012/05/05/jquery-etable-plugin/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2012/05/05/jquery-etable-plugin/</guid>
        </item>    
        <item>
            <title>jQuery MsgBox Plugin</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2012/05/04/jquery-msgbox-plugin/">《jQuery MsgBox Plugin》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2012/05/04/jquery-msgbox-plugin/">http://iyiguo.net/blog/2012/05/04/jquery-msgbox-plugin/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;移动目标元素对象，使其显示在遮罩层正中央。 &lt;code class=&quot;highlighter-rouge&quot;&gt;jmask&lt;/code&gt; 接受一个参数.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
    &lt;/p&gt;&lt;strong&gt;options&lt;/strong&gt;: 该参数为对象类型。用来设置遮罩层默认全局属性,默认属性为：&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$.fn.jmask.defaults = {
	bgcolor : &#39;#eee&#39;,
	opacity : 0.8
};
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

  &lt;/p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;#jmaskDemo&quot;).jmask();
$(&quot;#jmaskDemo&quot;).jmask({
    bgcolor:&#39;pink&#39;,
    opacity : 0.6
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;junmask-&quot;&gt;junmask() 关闭遮罩层&lt;/h3&gt;

&lt;blockquote&gt;
   
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2012/05/04/jquery-msgbox-plugin/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Fri, 04 May 2012 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2012/05/04/jquery-msgbox-plugin/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2012/05/04/jquery-msgbox-plugin/</guid>
        </item>    
        <item>
            <title>PL/SQL常用函数</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2011/11/18/plsql-sql-comm-func/">《PL/SQL常用函数》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2011/11/18/plsql-sql-comm-func/">http://iyiguo.net/blog/2011/11/18/plsql-sql-comm-func/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;abs(n)&lt;/code&gt; : 返回n的绝对值&lt;/p&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ceil(n)&lt;/code&gt; : 返回大于等于数字n的最小整数&lt;/p&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;floor(n)&lt;/code&gt; : 返回小于等于数字n的最大整数&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2011/11/18/plsql-sql-comm-func/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Fri, 18 Nov 2011 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2011/11/18/plsql-sql-comm-func/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2011/11/18/plsql-sql-comm-func/</guid>
        </item>    
        <item>
            <title>SQL查询语句要点</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2011/11/17/plsql-sql-select/">《SQL查询语句要点》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2011/11/17/plsql-sql-select/">http://iyiguo.net/blog/2011/11/17/plsql-sql-select/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;内连接用于返回满足连接条件的所有记录；默认情况下，在执行连接查询时如果没有指定任何连接操作符，那么这些连接查询都属于内连接。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; select a.dname,b.ename from department a, employee b where a.deptNo = b.deptNo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;或者&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL&amp;gt; select a.dame,b.ename from department a inner join employee b ON a.deptNo = b.deptNo;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;&lt;span class=&quot;label label-important&quot;&gt;&lt;em&gt;NOTES：&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2011/11/17/plsql-sql-select/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 17 Nov 2011 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2011/11/17/plsql-sql-select/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2011/11/17/plsql-sql-select/</guid>
        </item>    
        <item>
            <title>SQL分组语句要点</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2011/11/16/plsql-sql-groupby/">《SQL分组语句要点》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2011/11/16/plsql-sql-groupby/">http://iyiguo.net/blog/2011/11/16/plsql-sql-groupby/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grouping&lt;/code&gt; : 用于确定统计结果是否用到了特定列。如果返回0，则表示统计结果使用了该列；如果返回1，则表示统计结果未使用该列&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SQL&amp;gt; SELECT name,address ,SUM(money),GROUPING(name),GROUPING(address) FROM customer GROUP BY CUBE(name,address);
 NAME                         ADDRESS  COUNT(*) SUM(MONEY) GROUPING(name)  GROUPING(address)
 ---------------------------- ------- ---------- --------- --------------  -----------------
                                         4		162.26		1				1
                             a		 	1		32			1				0
                             abcdefg		2		118.03		1				0
                             152号大街	1		12.23		1				0
 oxcow									2		118.03		0				1
 oxcow						abcdefg		2		118.03		0				0
 leeyee									2		44.23		0				1
 leeyee						a			1		32			0				0
 leeyee						152号大街	1		12.23		0				0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
      &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dense_rank(expr1,expr2,..) within group (order by expr1,expr2,..)&lt;/code&gt; : 该函数用于返回特定数据在一组行数据中的等级。关于&lt;a href=&quot;http://docs.oracle.com/cd/B19306_01/server.102/b14200/functions123.htm&quot; title=&quot;rank&quot;&gt;rank&lt;/a&gt;,&lt;a href=&quot;http://docs.oracle.com/cd/B19306_01/server.102/b14200/functions043.htm&quot; title=&quot;dense_rank&quot;&gt;dense_rank&lt;/a&gt;的具体说明请&lt;a href=&quot;http://blog.csdn.net/baoqiangwang/article/details/4712481&quot;&gt;查看&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; SQL&amp;gt; select dense_rank(5000) within group (order by sal) rank from emp;
         RANK
         -----
         12
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
      &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; : &lt;strong&gt;Oracle9i新增函数&lt;/strong&gt;,获取首个排序等级，然后使用分组汇总函数汇总。&lt;strong&gt;该函数不能单独使用，必须与其他分组函数结合使用&lt;/strong&gt;。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; -- 年龄最大的一组人中工资最高的
 SQL&amp;gt; select max(money) keep (dense_rank first order by age desc) from customer;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2011/11/16/plsql-sql-groupby/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Wed, 16 Nov 2011 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2011/11/16/plsql-sql-groupby/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2011/11/16/plsql-sql-groupby/</guid>
        </item>    
        <item>
            <title>SQL事务语句要点</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2011/11/15/plsql-sql-transaction/">《SQL事务语句要点》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2011/11/15/plsql-sql-transaction/">http://iyiguo.net/blog/2011/11/15/plsql-sql-transaction/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;提交事务&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; commit
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

      &lt;/p&gt;当执行&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;后，会确认事务变化、结束事务、删除保存点、释放锁。以下情况会自动提交事务：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;DDL&lt;/code&gt;语句时；比如&lt;code class=&quot;highlighter-rouge&quot;&gt;create table&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;alter table&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;drop table&lt;/code&gt;等&lt;/li&gt;
      &lt;li&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;DCL&lt;/code&gt;语句时；比如&lt;code class=&quot;highlighter-rouge&quot;&gt;grant&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;revoke&lt;/code&gt;等。&lt;/li&gt;
      &lt;li&gt;退出&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL*Plus&lt;/code&gt;时。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
      &lt;/p&gt;保存点&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; savepoint &amp;lt;point_name&amp;gt;
 exec dbms_transaction.savepoint(&#39;&amp;lt;point_name&amp;gt;&#39;);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2011/11/15/plsql-sql-transaction/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Tue, 15 Nov 2011 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2011/11/15/plsql-sql-transaction/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2011/11/15/plsql-sql-transaction/</guid>
        </item>    
        <item>
            <title>SQL增删改语句要点</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2011/11/14/plsql-sql-cud/">《SQL增删改语句要点》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2011/11/14/plsql-sql-cud/">http://iyiguo.net/blog/2011/11/14/plsql-sql-cud/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;数据查询语句（&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 语句）：用于检索数据库数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
      &lt;/p&gt;数据操纵语言（&lt;code class=&quot;highlighter-rouge&quot;&gt;Data Manipulation Language&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;DML&lt;/code&gt;）：用于改变数据库数据,包括&lt;code class=&quot;highlighter-rouge&quot;&gt;insert&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;update&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt;三条语句&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
      &lt;/p&gt;事物控制语句（&lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction Contorl Language&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;TCL&lt;/code&gt;）：用户维护数据库的一致性,包括&lt;code class=&quot;highlighter-rouge&quot;&gt;commit&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;rollback&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;savepoint&lt;/code&gt;三条语句。&lt;/p&gt;

     
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2011/11/14/plsql-sql-cud/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Mon, 14 Nov 2011 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2011/11/14/plsql-sql-cud/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2011/11/14/plsql-sql-cud/</guid>
        </item>    
        <item>
            <title>Spring3 表达式语言(SpEL)介绍</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2011/06/19/spring-expression-language/">《Spring3 表达式语言(SpEL)介绍》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2011/06/19/spring-expression-language/">http://iyiguo.net/blog/2011/06/19/spring-expression-language/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;&lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.0.M3/reference/html/ch07.html&quot;&gt;Spring Expression Language (SpEL)&lt;/a&gt;语言支持在运行时操作和查询对象，其语法类似统一的EL语言，但是&lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.0.M3/reference/html/ch07.html&quot; title=&quot;SpEL&quot;&gt;SpEL&lt;/a&gt;提供了额外的功能。&lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.0.M3/reference/html/ch07.html&quot; title=&quot;SpEL&quot;&gt;SpEL&lt;/a&gt;支持以下功能：&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;2.1 文本表达式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#map&quot; id=&quot;markdown-toc-map&quot;&gt;2.2 属性、数组、列表、字典(map)及索引&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;2.3 内置列表&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#spring303&quot; id=&quot;markdown-toc-spring303&quot;&gt;2.4 数组构造(spring3.0.3中会抛出异常)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;2.5 方法调用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;2.6 操作符&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;2.6.1 关系操作符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;2.6.2 逻辑操作符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;2.6.3 数学运算操作符&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;2.7 赋值操作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;2.8 类型&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;2.9 构造器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;2.10 变量&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#this&quot; id=&quot;markdown-toc-this&quot;&gt;2.10.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;#this&lt;/code&gt;变量&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;2.11 用户自定义函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;2.12 三元操作&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#elvis&quot; id=&quot;markdown-toc-elvis&quot;&gt;2.13 Elvis操作&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;2.14 安全导航操作&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;2.15 集合选择&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;2.16 集合投影&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;2.17 模板表达式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;一大段测试用例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/p&gt;使用SpEl进行表达式操作，基本操作如下：&lt;/p&gt;

  &lt;/p&gt;第一步，构建解析&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ExpressionParser parser = new SpelExpressionParser();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2011/06/19/spring-expression-language/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sun, 19 Jun 2011 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2011/06/19/spring-expression-language/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2011/06/19/spring-expression-language/</guid>
        </item>    
        <item>
            <title>一些关于javascript、jQuery使用时的建议</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2011/04/09/javascript-jquery-user-suggests/">《一些关于javascript、jQuery使用时的建议》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2011/04/09/javascript-jquery-user-suggests/">http://iyiguo.net/blog/2011/04/09/javascript-jquery-user-suggests/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;在遍历数组时应将数组的长度保存在一个变量中，不要在循环中每次都访问数组长度。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// bad code  
for ( var i = 0; i &amp;lt; aArray.length; i++) {  
    // TODO something  
}  

// better code  
var iLen = aArray.length;  
for ( var i = 0; i &amp;lt; iLen; i++) {  
    // TODO something  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dom&quot;&gt;2.如果需要给DOM中添加新的元素，避免创建一个元素添加一次。应尽量只添加一次&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// bad code  
$.each(aArray, function(i, item) {  
    var newListItem = &#39;&amp;lt;li&amp;gt;&#39; + item + &#39;&amp;lt;/li&amp;gt;&#39;;  
    $(&#39;ul&#39;).append(newListItem); // 这里每append一次都将会重载DOM  
});  

// better code  
var frag = document.createDocumentFragment(); // 创建文档碎片  
$.each(aArray, function(i, item) {  
    var newListItem = &#39;&amp;lt;li&amp;gt;&#39; + item + &#39;&amp;lt;/li&amp;gt;&#39;;  
    frag.appendChild(newListItem); // 这里不会刷新DOM  
});  
$(&#39;ul&#39;).appendChild(frag); // 添加新元素，此时重载DOM一次  

// or do this  
var sHtml = &#39;&#39;;  
$.each(aArray, function(i, item) {  
    html += &#39;&amp;lt;li&amp;gt;&#39; + item + &#39;&amp;lt;/li&amp;gt;&#39;; // 构造需要添加元素的字符串  
});  
$(&#39;ul&#39;).html(sHtml); // 使用jQuery的$.fn.html()方法添加改字符串  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3.避免重复，保持代码干燥&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// bad code  
if ($eventfade.data(&#39;currently&#39;) != &#39;showing&#39;) {  
    $eventfade.stop();  
}  
if ($eventhover.data(&#39;currently&#39;) != &#39;showing&#39;) {  
    $eventhover.stop();  
}  
if ($spans.data(&#39;currently&#39;) != &#39;showing&#39;) {  
    $spans.stop();  
}  

// good  
var $elems = [ $eventfade, $eventhover, $spans ]; // 构造一个数组  
$.each($elems, function(i, elem) {  
    if (elem.data(&#39;currently&#39;) != &#39;showing&#39;) {  
        elem.stop();  
    }  
});  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-2&quot;&gt;4.当心匿名函数。&lt;/h2&gt;

  &lt;/p&gt;绑定匿名函数是让人头疼的，对于他们调试，修改，测试或者重用都是困难的。因此可以使用对象去组织和命名你的处理方法和回调函数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// bad code  
$(document).ready(function() {  
    $(&#39;#magic&#39;).click(function(e){  
            $(&#39;#yayeffects&#39;).slideUp(function() {  
                    // TODO some codes  
            });  
    });  
    $(&quot;#happiness&quot;).load(url + &#39; #unicorns&#39;,function(){  
        // TODO some codes  
    });  
});  
  
// better  
var PI = {  
     onReady :  function(){  
            $(&#39;#magci&#39;).click(PI.candyMtn);  
            $(&#39;#happiness&#39;).load(PI.url + &#39; #unicorns&#39;, PI.unicornCb);  
     },  
     candyMtn : function(e) {  
            $(&#39;#yayeffects&#39;).slideUp(PI.slideCb);  
     },  
     slideCb : function() { // TODO some codes},  
     unicornCb : function() { // TODO some codes}  
};  
$(document).ready(PI.onReady);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;5.选择器的优化&lt;/h2&gt;

&lt;h3 id=&quot;id&quot;&gt;5.1.通过ID来获取元素是最好的选择&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// fast  
$(&#39;#container div.robotarm&#39;); // 获取元素id=container中div元素class=robotarm的元素

// super-fast  
$(&#39;#container&#39;).find(&#39;div.robotarm&#39;);  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;/p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$.fn.find&lt;/code&gt;方法是快速的，因为对于第一个选择&lt;code class=&quot;highlighter-rouge&quot;&gt;$(&#39;#container&#39;)&lt;/code&gt;其实质是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;document.getElementById()&lt;/code&gt;来实现的。&lt;code class=&quot;highlighter-rouge&quot;&gt;document.getElementById()&lt;/code&gt;是浏览器原生方法&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;5.2.选择器的右边要具体化，而不是左边。&lt;/h3&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2011/04/09/javascript-jquery-user-suggests/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Sat, 09 Apr 2011 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2011/04/09/javascript-jquery-user-suggests/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2011/04/09/javascript-jquery-user-suggests/</guid>
        </item>    
        <item>
            <title>javascript 最佳实践</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2010/04/07/javascript-best-practices/">《javascript 最佳实践》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2010/04/07/javascript-best-practices/">http://iyiguo.net/blog/2010/04/07/javascript-best-practices/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;原文地址：&lt;a href=&quot;http://www.javascripttoolbox.com/bestpractices/&quot;&gt;http://www.javascripttoolbox.com/bestpractices/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;var&quot;&gt;1.总是使用关键字_var_声明变量&lt;/h3&gt;

  &lt;/p&gt;javascript中的变量不是全局范围就是函数范围，使用关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;声明变量是必不可少的。当声明一个变量时不管是全局变量还是函数级变量，都不应省略变量的前缀关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;。下边的例子说明了如果不这样做可能存在的潜在问题。&lt;/p&gt;

  &lt;/p&gt;没有使用关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;声明变量产生的问题&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var i = 0; // This is good - creates a global variable
function test() {
    for (i=0; i&amp;lt;10; i++) {
        alert(&quot;Hello World!&quot;);
    }
}
test();
alert(i); // The global variable i is now 10!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2010/04/07/javascript-best-practices/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Wed, 07 Apr 2010 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2010/04/07/javascript-best-practices/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2010/04/07/javascript-best-practices/</guid>
        </item>    
        <item>
            <title>struts2中iterator标签的相关使用</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2009/09/03/struts2-iterator-usage/">《struts2中iterator标签的相关使用》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2009/09/03/struts2-iterator-usage/">http://iyiguo.net/blog/2009/09/03/struts2-iterator-usage/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;在说明s:iterator标签的使用前，先了解下struts2中的Value Stack。这里参考了webwork中对Value Stack的描述，由于struts2是在webwork的基础上进行升级的，因此webwork对于Value Stack的表述同样适用于struts2。在这里不描述Value Stack具体做什么，但有两点需要注意：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一个value stack本质上是一个List；&lt;/li&gt;
  &lt;li&gt;在栈中调用 [n] 将返回一个从位置n开始的子栈；&lt;/li&gt;
&lt;/ol&gt;

  &lt;/p&gt;对于2举个例子说明。假定Value Stack包含了[model,action,others]，那么&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;[0] — 返回 [model,action,others]；&lt;/li&gt;
  &lt;li&gt;[1] — 返回 [action,others]；&lt;/li&gt;
  &lt;li&gt;[2] — 返回 [others];&lt;/li&gt;
&lt;/ol&gt;

  &lt;/p&gt;现在将开始介绍 &lt;code class=&quot;highlighter-rouge&quot;&gt;s:iterator&lt;/code&gt; 的一些使用。以下代码片段均在开发环境eclipse3.4 wtp、tomcat5.5、jdk5上使用struts2.1.6测试通过。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;集合元素访问&lt;/h2&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2009/09/03/struts2-iterator-usage/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Thu, 03 Sep 2009 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2009/09/03/struts2-iterator-usage/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2009/09/03/struts2-iterator-usage/</guid>
        </item>    
        <item>
            <title>屏蔽window.close方法在IE中的二次确认</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2009/08/24/javascript-window-close-notconfirm/">《屏蔽window.close方法在IE中的二次确认》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2009/08/24/javascript-window-close-notconfirm/">http://iyiguo.net/blog/2009/08/24/javascript-window-close-notconfirm/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;在实际的开发过程中遇到当调用javascript中&lt;code class=&quot;highlighter-rouge&quot;&gt;window.close()&lt;/code&gt;方法时，IE会在页面关闭前询问用户是否要关闭的二次确认对话框。为了避免这个问题，需要在调用&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt;方法前做一些处理&lt;/p&gt;

  &lt;/p&gt;针对IE的不同版本，处理方式是不同的。因此在处理之前应先判断IE浏览器的版本。&lt;/p&gt;

  &lt;/p&gt;浏览器及其版本的判断可以使用jQuery1.9版本之前的&lt;a href=&quot;http://api.jquery.com/jQuery.browser/&quot;&gt;$.browser&lt;/a&gt;方法或者&lt;a href=&quot;/blog/2009/08/24/javacript-broswer-check/&quot;&gt;使用javascript检测浏览器版本&lt;/a&gt;中提到的方式检测，这里不在赘述直接给出相关代码。&lt;/p&gt;

&lt;h3 id=&quot;ie7&quot;&gt;IE7及其以上版本&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(isMinIE7||isMinIE8){ // IE7以上  
    window.open(&#39;&#39;,&#39;_top&#39;);  
    window.top.close();  
    return ;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ie6&quot;&gt;IE6及其以下版本&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(isMinIE6){//IE6   
    window.opener=null;  
    window.close();  
    return ;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;chromesafarifirefox&quot;&gt;Chrome,Safari和Firefox&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; window.close(); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;alert alert-error&quot;&gt;
&lt;h4&gt;Notes: &lt;/h4&gt; 针对FireFox浏览器时，除了使用&lt;code&gt;window.close()&lt;/code&gt;，为了达到直接关节而无需提示的效果都需要在FireFox的地址栏中输入&lt;code&gt;about:config&lt;/code&gt;，然后将&lt;code&gt;dom.allow_script_to_close_windows&lt;/code&gt;改为true才能达到想要的效果。
&lt;/div&gt;
 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2009/08/24/javascript-window-close-notconfirm/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Mon, 24 Aug 2009 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2009/08/24/javascript-window-close-notconfirm/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2009/08/24/javascript-window-close-notconfirm/</guid>
        </item>    
        <item>
            <title>使用javascript检测浏览器版本</title>
            <description>
                <![CDATA[<div class="alert alert-warning" role="alert">
                    <strong>版权声明：</strong>
                    <ul>
                        <li>关于<a href="http://iyiguo.net/blog/2009/08/24/javacript-broswer-check/">《使用javascript检测浏览器版本》</a>的一切权利归作者<a href="mailto:seadlead@gmail.com"　class="alert-link">@Leeyee</a>所有；</li>
                    <li>非商用、非衍生;</li>
                    <li>如需转载需要注明来源于<a href="http://iyiguo.net/blog/2009/08/24/javacript-broswer-check/">http://iyiguo.net/blog/2009/08/24/javacript-broswer-check/</a></li>
                </ul></div>]]>
                
                 &lt;/p&gt;以下浏览器版本的判断方法参考了《JavaScript 高级程序设计》第八章。&lt;/p&gt;

  &lt;/p&gt;总体上我们验证浏览器及其版本是通过浏览器的&lt;strong&gt;user-agent&lt;/strong&gt;字符串来检测的。常见的有：&lt;/p&gt;

&lt;blockquote&gt;
    &lt;/p&gt;Safari： Mozilla/5.0 (Windows NT 5.1) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2&lt;br /&gt;
    Chrome： Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31&lt;br /&gt;
    IE：     Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; InfoPath.2; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)&lt;br /&gt;
    Firefox：Mozilla/5.0 (Windows NT 5.1; rv:19.0) Gecko/20100101 Firefox/19.0&lt;/p&gt;
&lt;/blockquote&gt;

 
                <![CDATA[<p class="pull-right">
                    <a href="http://iyiguo.net/blog/2009/08/24/javacript-broswer-check/">阅读全文......</a>
                </p>]]>
            </description>
            <pubDate>Mon, 24 Aug 2009 00:00:00 +0800</pubDate>
            <link>http://iyiguo.net/blog/2009/08/24/javacript-broswer-check/</link>
            <guid isPermaLink="true">http://iyiguo.net/blog/2009/08/24/javacript-broswer-check/</guid>
        </item>   
    </channel>
</rss>